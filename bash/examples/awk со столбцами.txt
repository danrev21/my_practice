
# удалить лишние пробелы в начале строки
awk '{ $1=$3=""; sub(/^ */,"",$0) }1' file  
-------------------
# вывводит файл как есть
awk '{print}' passwd_new
--------------------------
# в строке где saned в последнем столбце заменить значение на soft
awk '/saned/' passwd_new | awk 'BEGIN{FS=OFS=":"} {$NF="soft"}'1
---------------------------
# выводит строку со словом saned
awk -F: '{if($1=="saned") {print $0}}' passwd_new

awk '$2=="no"{$3="N/A"}1' file
name col1  col2
abc no N/A
xyz  yes   yes
man no N/A
wrr no N/A
------------------------------------------------
sed "s/\([A-Za-z]*\ *no\ *\).*/\1N\/A/g" file
name col1  col2
abc  no    N/A
xyz  yes   yes
man  no    N/A
wrr  no    N/A
----------------------------------------------------------
awk '$2 == "no" {$3="N/A"} {print}' file
name col1  col2
abc no N/A
xyz  yes   yes
man no N/A
wrr no N/A
---------------------------------------------------------------------
awk '$2 == "no" {$3="N/A"} {print $1"\t"$2"\t"$3}' file
awk '$2 == "no" {$3="N/A"} {print $1" "$2" "$3}' file
# ...
-------------------------------------------------------------------
cat your-file.txt | awk '{if ( $2 == "no" ) { $3 = "N/A"; } print $0 }' > your-new-file.txt
-----------------------------------------------------------------
while read name col1 col2 ; do
   if [[ "$col" = no ]]; then
      echo "$name $col1 N/A"
   else
      echo "$name $col1 $col2"
   fi
done < file
------------------------------------------------------------------
$1 == "no" { print $1" "$2" N/A"; next; }
{ print; }
-----------------------------------------------------------------------
awk -F ',' '$3 == "Erika Meeks" {$4="GOOOOOAAAAL"} {print $1 "," $2 "," $3 "," $4 "," $5 ","}' accounts.csv
------------------------
awk -F ',' '$3 ~ /rik/ {$5="GOOOOOAAAAL"} {print $1 "," $2 "," $3 "," $4 "," $5 ","}' accounts.csv | sed -e "s/\b\(.\)/\u\1/g"
----------------------
awk -F ',' '$3 ~ /[A-z]/ {$5="GOOOOOAAAAL"} {print $1 "," $2 "," $3 "," $4 "," $5 ","}' accounts.csv | sed -e "s/\b\(.\)/\u\1/g"

awk -F ',' '$3 ~ /E/ {$5="emeeks@abc.mail"} {print $1 "," $2 "," $3 "," $4 "," $5 ","}' accounts.csv | sed -e "s/\b\(.\)/\u\1/g"

sed -e "s/\b\(.\)/\u\1/g" accounts.csv | awk -F ',' '$3 ~ /E/ {$5="emeeks@abc.mail"} {print $1 "," $2 "," $3 "," $4 "," $5 ","}'
----------------------------------------------------------------------------------
cat accounts.csv | sed -e "s/\b\(.\)/\u\1/g" | awk 'BEGIN{FS=OFS=","} {$5=""; $6=""}1' | sed 's/,,,*/,/g' | sed 's/"*//g'  > out.csv
------------------------------------------------------------
awk '{print $1 $5 $6}' $filename
# Выводит содержимое 1-го, 5-го и 6-го полей из файла $filename.
---------------------------------------------------------
cat accounts.csv | cut -d \, -f 3 | sed -e "s/\b\(.\)/\u\1/g"
----------------------------------------------------------------------
Удаление лишних запятых в csv строках
$ echo "1,2,3,,4,field 5,,,six,7" |sed 's/,,,*/,/g'
1,2,3,4,field 5,six,7
---
$ x="1,2,3,,4,field 5,,,six,7"
$ echo "${x//,+(,)/,}"
1,2,3,4,field 5,six,7
-----------------------------------------------------
присваивает значения 2го столбца предпоследнему (или наоборот))и удаляет последние два столбца
awk 'BEGIN{FS=OFS=","} {$2=$(NF-1); NF=NF-2}'1 sample.csv
--------------------------------------------------------------------
awk -F ',' '{$5=$3} {print $1 "," $2 "," $3 "," $4 "," $5 ","}' > out.csv
--------------
awk -F "," '{$5=$2"@abc.com"} {print $5}' accounts_edit.csv > domain_email.csv
--------------------
awk 'BEGIN{FS=OFS=","} {$2=$(NF-1); NF=NF-2}'1 |
-----------------------------------
while read -r line
do
   field1=$(echo $line | awk '{printf $1}' | tr -d '"')
   field2=$(echo $line | awk '{printf $2}' | tr -d '"')
   field3=$(echo $line | awk '{printf $3}' | tr -d '"')
   field4=$(echo $line | awk '{printf $4}' | tr -d '"')
   field5=$(echo $line | awk '{printf $5}' | tr -d '"')
   echo $field1 $field2 $field3 $field4 $field5 
done 

---------------------------
cat out.csv | awk -F "," '{print $5}' | sed 's/[A-z]* [A-z]*/A [a-z]*/g' > tmp.csv
cat tmp.csv
-------------------------

awk -F ',' '{if($2 =="9"){$5="N/A"} {print $1 "," $2 "," $3 "," $4 "," $5 ","}}' accounts_edit.csv
------------------------------------
awk -F ',' '{if($2 =="8"){$5=$3} {print $1 "," $2 "," $3 "," $4 "," $5 "8@abc.com,"}}' accounts_edit.csv
33,8,Erika Meeks,Tester,Erika Meeks8@abc.com,
-------------------------------------------------------------
awk 'FNR==8 || FNR==10 || (FNR>=13 && FNR<=25)' email.csv | sed 's/[0-9]*//g'
--------------------------------------------------------------
  awk 'BEGIN{s=8} FNR==s' email.csv
-----------------------------------------------------------
perl -ne 'print if $SEEN{$_}++' < full.name.csv
---------------------------------
perl -F/,/ -ane 'print if $SEEN{$F[2]}++' | sed 's/[0-9]*//g' < accounts_edit2.csv
---------------------------------------------------------------------
$ sort -t';' -k3,6 -u accounts_edit2.csv
1,1,Susan Houston,Director Of Services,shouston1@abc.com
-----
$ awk -F';' '!a[$3$4]++' accounts_edit2.csv
1,1,Susan Houston,Director Of Services,shouston1@abc.com
-----
$ awk -F";" '{if(arr[$3 $4 $5 $6] == 0) {print; arr[$3 $4 $5 $6] = 1}}' accounts_edit2.csv
1,1,Susan Houston,Director Of Services,shouston1@abc.com
------------------------------------------------------------------------------------

выравнивает табл по кол столбцов (по максимальному)
awk -F, -v OFS=, 'NR==FNR{if(max<NF)max=NF;next}; {NF=max}1' file{,} 

cat accounts.csv | awk -F, -v OFS=, 'NR==FNR{if(max<NF)max=NF;next}; {NF=max}1' file{,} | tail -n +2 | sed -e "s/\b\(.\)/\u\1/g" | sed 's/"*//g' | awk 'BEGIN{FS=OFS=","} {NF=NF-2}'1 
---------------------------------------------
Команда join оперирует только двумя файлами и объедияет только те строки, которые имеют общее поле (обычно числовое), результат объединения выводится на stdout. Объединяемые файлы должны быть отсортированы по ключевому полю.

File: 1.data

100 Shoes
200 Laces
300 Socks


File: 2.data

100 $40.00
200 $1.00
300 $2.00


bash$ join 1.data 2.data
File: 1.data 2.data

100 Shoes $40.00
200 Laces $1.00
300 Socks $2.00
-------------------------------------------------------------------
Выведет строку из первого и второго массива тех элементов что отличаются
echo ${arr1[@]} ${arr2[@]} | tr ' ' '\n' | sort | uniq -u
---------------------------------------------------
awk -F, '$3!=0' test.csv
Это приведет к печати всей строки, если столбец 3 не равен 0.
--------------------------------------------------------
вырезать столбец по разделителю :
cut -d: -f1 text.txt
------------------------------------------------------------------
Вы можете вывести несколько столбцов с помощью cut. В следующем примере будет выведен как первый, так и второй столбец из файла:1
$ cut -d: -f '1 2' text.txt
----------------------------------------------------------

 







